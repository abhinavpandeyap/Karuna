package com.karuna.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.karuna.dto.LoginDto;
import com.karuna.dto.LogoutDto;
import com.karuna.dto.RegisterReceiverDto;
import com.karuna.dto.RequestDto;
import com.karuna.entity.Campaign;
import com.karuna.entity.Donor;
import com.karuna.entity.Item;
import com.karuna.entity.Receiver;
import com.karuna.services.ReceiverService;

@RestController
@CrossOrigin
@RequestMapping("/receiver")
public class ReceiverController {
	
	@Autowired
	private ReceiverService receiverService;
	
	
	

    public ReceiverController() {
		super();
	}

	@PostMapping("/register")
    public ResponseEntity<?> addreceiver(@RequestBody RegisterReceiverDto receiver) {
		return ResponseEntity.ok(receiverService.registerReceiver(receiver));
    	
    }
    
    @GetMapping("/items")
    public ResponseEntity<?> viewItems(){
    	return ResponseEntity.ok(receiverService.viewItems());
    }
    
    @DeleteMapping("/{receiverId}")
    public ResponseEntity<?> deleteReceiver(@PathVariable Long receiverId) {
    	return ResponseEntity.ok(receiverService.deleteAccount(receiverId));
    }
    
    @PutMapping("/profile")
    public ResponseEntity<?> updatereceiver(@RequestBody RegisterReceiverDto updatedReceiver) {
    	return ResponseEntity.ok(receiverService.updateReceiver(updatedReceiver));
    }
    
    
    @PostMapping("/login")
	public ResponseEntity<?> validateReceiver(@RequestBody @Valid LoginDto dto){
    	return ResponseEntity.ok(receiverService.login(dto));
    } 
    
    @PostMapping("/request")
    public ResponseEntity<?> createRequest(@RequestBody RequestDto reqDto){
    	return ResponseEntity.ok(receiverService.createRequest(reqDto));
    }
    
    @GetMapping("/donors")
    public ResponseEntity<?> viewDonors(){
    	return ResponseEntity.ok(receiverService.viewDonors());
    }
    
    @GetMapping("/history/{receiverId}")
    public ResponseEntity<?> viewHistory(@PathVariable Long receiverId){
    	return ResponseEntity.ok(receiverService.viewHistory(receiverId));
    }
    
    @PutMapping("/{itemId}")
    public ResponseEntity<?> acceptItem(@PathVariable Long itemId,Long receiverId){
    	return ResponseEntity.ok(receiverService.receive(itemId,receiverId));
    }
    
    @GetMapping("/logout/{receiverId}")
    public ResponseEntity<?> logOut(@PathVariable Long receiverId){
    	return ResponseEntity.ok(receiverService.logout(receiverId));
    }

}
